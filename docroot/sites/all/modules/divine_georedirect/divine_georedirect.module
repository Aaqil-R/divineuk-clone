<?php

/**
 * Implements hook_boot().
 */
function divine_georedirect_boot() {
	//verify that a URL has been set
	require_once DRUPAL_ROOT . '/' . './includes/common.inc';
	require_once DRUPAL_ROOT . '/' . './includes/path.inc';
	drupal_load('module', 'geoip');
	drupal_bootstrap(DRUPAL_BOOTSTRAP_LANGUAGE);
	drupal_load('module', 'filter');
	//if the user isn't trying to login then attempt a redirect script
	if (arg(0) != 'user' && arg(0) != 'login' && arg(0) != 'admin') {
		global $user;
		global $language;
		global $base_url;

		$redirect_url = variable_get('divine_georedirect_url', '');

		if ($redirect_url != '' && $user->uid == 0) {
			$redirect_countries = variable_get('divine_georedirect_country', array());
			// Check is except option selected and chenge list of redirect countries
			if(variable_get('divine_georedirect_except', 0)) {
				$list_of_countries = geoip_country_values();
				foreach($list_of_countries as $key=>$value){
					$list_of_countries[$key] = $key;
				}
				$redirect_countries = array_diff($list_of_countries, $redirect_countries);
			}
			
			$country_code = geoip_country_code();
			if(empty($country_code)) $country_code = 'A1';

			//This code will run they hit frontpage
			if(empty($_GET['q'])) {
				// Redirect when user open home page without language prefix
				if(!in_array($country_code, $redirect_countries) && !isset($_SERVER['REDIRECT_URL'])) {
				$query_string = '';
				if(!empty($_GET['geoip_debug'])) {
					$ary = $_GET;
					$ary['geo'] = $country_code;
					unset($ary['q']);
					$query_string = '?' . http_build_query($ary);
				}
					divine_georedirect_redirect($base_url . '/'. $language->prefix . $query_string, 100);
				}
				// Redirect from current site to the URL specified above
				elseif(in_array($country_code, $redirect_countries)) {
					divine_georedirect_redirect($redirect_url, 100);
				}
			}
			//This code will run the first time they hit a page to set the geo variable
			elseif(in_array($country_code, $redirect_countries) && !isset($_GET['geo'])) {
				$ary = $_GET;
				$ary['geo'] = $country_code;
				unset($ary['q']);
				drupal_goto(drupal_get_path_alias($_GET['q']), array('query' => $ary));
			}
			//if we've redirected, and they are anon and its the country we're looking for
			elseif(in_array($country_code, $redirect_countries) && $_GET['geo'] == $country_code) {
				drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
				//write variable as to where to redirect
				drupal_add_js(array('divine_georedirect' => array(
					'url' => $redirect_url,
					'country_code' => $country_code,
					'site_name' => variable_get('site_name', ''),
					'server_origin' => variable_get('site_default_country', ''),
				)), array('type' => 'setting', 'scope' => JS_DEFAULT));
				//cookie code to store if they want to stay on the site
				drupal_add_js(drupal_get_path('module','divine_georedirect') .'/jquery.cookie.js');
				//redirect code to push them to the new URL if they said they want to go there
				drupal_add_js(drupal_get_path('module', 'divine_georedirect') . '/redirect.js');
				//fix for the popups and modalframe projects
				drupal_add_js(drupal_get_path('module', 'divine_georedirect') . '/popupfix.js');
				drupal_add_css(drupal_get_path('module', 'divine_georedirect') . '/redirect.css');
			}
		}
	}
	drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
}
/**
 * Implements hook_menu().
 */
function divine_georedirect_menu() {
	$items['admin/config/divine_georedirect'] = array(
		'title' => 'IP Redirect',
		'description' => 'Setup a global redirect based on the country of origin',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('divine_georedirect_admin_settings'),
		'access arguments' => array('administer site configuration'),
	);

	return $items;
}

/**
 * Implements hook_admin_settings().
 */
function divine_georedirect_admin_settings($form, &$form_state) {
	$form['divine_georedirect_url'] = array(
		'#type' => 'textfield',
		'#title' => t('Redirect URL'),
		'#description' => t('The URL to redirect to based on country selection below. Leaving this blank will effectively disable the module.'),
		'#default_value' => variable_get('divine_georedirect_url', ''),
	);
	$form['divine_georedirect_country'] = array(
		'#type' => 'select',
		'#multiple' => TRUE,
		'#size' => 20,
		'#options' => geoip_country_values(),
		'#title' => t('Country'),
		'#description' => t('Countries to redirect from current site to the URL specified above.'),
		'#default_value' => variable_get('divine_georedirect_country', ''),
	);
	$form['divine_georedirect_except'] = array(
		'#type' => 'checkbox',
		'#title' => t('All except selected above'),
		'#description' => t('Select this option to redirect from all coutries except selected above.'),
		'#default_value' => variable_get('divine_georedirect_except', ''),
	);

	return system_settings_form($form);
}

/**
 * Redirect function for hook boot
 * @param string $url
 * @param int $num
 *
 * @return void
 */
function divine_georedirect_redirect($url, $num = 301) {
	static $http = array(
		100 => "HTTP/1.1 100 Continue",
		101 => "HTTP/1.1 101 Switching Protocols",
		200 => "HTTP/1.1 200 OK",
		201 => "HTTP/1.1 201 Created",
		202 => "HTTP/1.1 202 Accepted",
		203 => "HTTP/1.1 203 Non-Authoritative Information",
		204 => "HTTP/1.1 204 No Content",
		205 => "HTTP/1.1 205 Reset Content",
		206 => "HTTP/1.1 206 Partial Content",
		300 => "HTTP/1.1 300 Multiple Choices",
		301 => "HTTP/1.1 301 Moved Permanently",
		302 => "HTTP/1.1 302 Found",
		303 => "HTTP/1.1 303 See Other",
		304 => "HTTP/1.1 304 Not Modified",
		305 => "HTTP/1.1 305 Use Proxy",
		307 => "HTTP/1.1 307 Temporary Redirect",
		400 => "HTTP/1.1 400 Bad Request",
		401 => "HTTP/1.1 401 Unauthorized",
		402 => "HTTP/1.1 402 Payment Required",
		403 => "HTTP/1.1 403 Forbidden",
		404 => "HTTP/1.1 404 Not Found",
		405 => "HTTP/1.1 405 Method Not Allowed",
		406 => "HTTP/1.1 406 Not Acceptable",
		407 => "HTTP/1.1 407 Proxy Authentication Required",
		408 => "HTTP/1.1 408 Request Time-out",
		409 => "HTTP/1.1 409 Conflict",
		410 => "HTTP/1.1 410 Gone",
		411 => "HTTP/1.1 411 Length Required",
		412 => "HTTP/1.1 412 Precondition Failed",
		413 => "HTTP/1.1 413 Request Entity Too Large",
		414 => "HTTP/1.1 414 Request-URI Too Large",
		415 => "HTTP/1.1 415 Unsupported Media Type",
		416 => "HTTP/1.1 416 Requested range not satisfiable",
		417 => "HTTP/1.1 417 Expectation Failed",
		500 => "HTTP/1.1 500 Internal Server Error",
		501 => "HTTP/1.1 501 Not Implemented",
		502 => "HTTP/1.1 502 Bad Gateway",
		503 => "HTTP/1.1 503 Service Unavailable",
		504 => "HTTP/1.1 504 Gateway Time-out"
	);

	header($http[$num]);
	header("Location: $url");
	exit();
}
